/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package meninblack;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Marti
 */
public class KontorSida extends javax.swing.JFrame {
    private static InfDB idb;

    /**
     * Creates new form KontorSida
     */
    public KontorSida(InfDB idb) {
        initComponents();
        this.idb = idb;
        fyllJComboKontor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCBKontoret = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAreaKontor = new javax.swing.JTextArea();
        jBSok = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        jLabel1.setText("Kontorshantering");

        jLabel2.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        jLabel2.setText("Vänligen välj ett kontor:");

        jCBKontoret.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N
        jCBKontoret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBKontoretActionPerformed(evt);
            }
        });

        jTAreaKontor.setColumns(20);
        jTAreaKontor.setRows(5);
        jScrollPane1.setViewportView(jTAreaKontor);

        jBSok.setText("Sök");

        jButton1.setText("Vill du ändra chef för kontorer?");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(134, 134, 134))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCBKontoret, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBSok, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(31, 31, 31))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCBKontoret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBSok))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBKontoretActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBKontoretActionPerformed
        // Denna metod tar en SQL fråga som tar fram namnet som är kopplat till AGENT_ID:t i tabellen 
        // kontorchef. Frågan tar också villkoret benämning vilket hittas i comboBoxen. Med värdet från frågan 
        // fyller den textrutan med relevant information. 
        jTAreaKontor.setText("");

        ArrayList<HashMap<String, String>> soktaKontor;

        try {
            String valtKontor = jCBKontoret.getSelectedItem().toString();

            String fraga = "SELECT namn from agent join kontorschef on agent.`Agent_ID` = kontorschef.`Agent_ID` where kontorsbeteckning ='" + valtKontor + "'";
            soktaKontor = idb.fetchRows(fraga);

            for (HashMap<String, String> ettKontor : soktaKontor) {
                jTAreaKontor.append("Chef för detta kontor är: " + "\n" + ettKontor.get("Namn") + "    ");
            }
        } catch (InfException ettE) {
            JOptionPane.showMessageDialog(null, "Något gick fel med att ta hem information from databasen");
            System.out.println("Internt felmeddelande" + ettE);
        }
    }//GEN-LAST:event_jCBKontoretActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String id = "";
        String nyttID = "";
        String nyChef = JOptionPane.showInputDialog("Vilken agent ska bli den nya chefen för detta kontor?");
        String chefFraga = "SELECT namn from agent join kontorschef on agent.`Agent_ID` = kontorschef.`Agent_ID` where kontorsbeteckning = 'Örebrokontoret'";
        try {
            String chefKontor = idb.fetchSingle(chefFraga);
            id = idb.fetchSingle("select agent.agent_ID from agent where namn ='" + chefKontor + "'");
        } catch (InfException ettE) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod när hämtningen av chef skedde, är du säker på att det finns en chef för detta kontor?");
            System.out.println("Internt felmeddelande" + ettE);
        }
        try {
            nyttID = idb.fetchSingle("select agent.agent_ID from agent where namn ='" + nyChef + "'");
        } catch (InfException ettE) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod med namnet. Är du säker att denna agent finns existerar?");
            System.out.println("Internt felmeddelande" + ettE);
        }
        String uppdateraChef = "UPDATE Kontorschef set Kontorschef.`Agent_ID` = " + nyttID + " WHERE Kontorschef.`Agent_ID` = " + id;
        try {
            idb.update(uppdateraChef);
        } catch (InfException ettE) {
            JOptionPane.showMessageDialog(null, "Ett fel har uppstått med databasen");
            System.out.println("Internt felmeddelande" + ettE);
        }
        
        
            
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fyllJComboKontor() {
        // Fyller på comboboxen med relevant information för användaren. Detta gör så att om det bestäms för att lägga 
        // till fler kontor i framtiden kommer även de kontoren finnas med i metoden. 
        String fråga = "SELECT Kontorsbeteckning FROM kontorschef";

        ArrayList<String> allaKontor;
        
        try {

            allaKontor = idb.fetchColumn(fråga);

            for (String ettKontor : allaKontor) {
                jCBKontoret.addItem(ettKontor);
            }
        } catch (InfException ettUndantag) {
            JOptionPane.showMessageDialog(null, "Det blev ett fel när kontoren skulle hämtas");
            System.out.println("Internt meddelande" + ettUndantag.getMessage());
        } catch (Exception ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel med databasen");
            System.out.println("Intern meddelande" + ettUndantag.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KontorSida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KontorSida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KontorSida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KontorSida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KontorSida(idb).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBSok;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jCBKontoret;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAreaKontor;
    // End of variables declaration//GEN-END:variables
}
