/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package meninblack;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author emanuelgotesjo
 */
public class UppdateraEnAlien extends javax.swing.JFrame {
    
    private InfDB idb; 
    private User user;
    

    private int aid;
    private String namn;
    private String telefon;
    private String ras;
    private int plats;
    private int ansvarigAgent;
    

    /**
     * Creates new form RegistreraAlien
     */
    public UppdateraEnAlien(InfDB idb, User user) {
        initComponents();
        
        this.idb = idb;
        this user = user;

        namn = "";
        telefon = "";
        ras = "";
        
        //Fyller det comboboxar som används i formuläret
        fyllaPlatsCB();
        fyllaAgentCB();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jBRegistrera = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel1.setText("Ändra info om Alien");

        jLabel2.setText("Telefon");

        jLabel4.setText("AlienNamn");

        jBRegistrera.setText("Uppdatera");
        jBRegistrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRegistreraActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");

        jLabel6.setText("EnPlats");

        jLabel7.setText("Plats");

        jLabel8.setText("EnPlats");

        jButton2.setText("jButton1");

        jButton3.setText("jButton1");

        jLabel9.setText("Ansvarig Agent");

        jLabel10.setText("EnPlats");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel6))
                                        .addGap(74, 74, 74)
                                        .addComponent(jButton1)))
                                .addGap(0, 14, Short.MAX_VALUE)))
                        .addGap(23, 23, 23)))
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jBRegistrera)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jButton2)))
                        .addGap(36, 36, 36)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jButton3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jBRegistrera)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBRegistreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRegistreraActionPerformed

        // Registrerar en alien till Databasen 
        setAlienInfo();
      
       String fraga2 = "INSERT INTO Alien (Alien_ID, Losenord, Namn, Telefon, Ansvarig_Agent, Plats) VALUES ("+aid+", '"+losenord+"', '"+namn+"', '"+telefon+"', "+ansvarigAgent+"," +plats+")";
                
        //Gör registreringen via en sql fråga
        try{
            idb.insert(fraga2);
            
        } catch(InfException e){
            JOptionPane.showMessageDialog(null, "Fel i Databasfråga");
            System.out.println("Kunde inte lägga till Alien till databasen" + e.getMessage());
            
        }
         sattRas();
         
         dispose();
         

    }//GEN-LAST:event_jBRegistreraActionPerformed

    
    //Metod för att fylla COMBOBOX innehållande platser i databasen 
    private void fyllaPlatsCB(){
        String platsFråga = "SELECT Benamning FROM Plats ORDER By Benamning";
        
        ArrayList<String> allaPlatsNamn;
        
        try{
            allaPlatsNamn = idb.fetchColumn(platsFråga);
            
            for(String platsen : allaPlatsNamn)
            {
                jCBPlats.addItem(platsen);
            }
                    
        } catch(InfException ettUndantag){
            JOptionPane.showMessageDialog(null, "Inläsningsfel ifrån Databasen");
        }
        
    }
    
    //Metod fö att fylla COMBOX för ansvarande agent
    private void fyllaAgentCB() {
        String agentFråga = "SELECT Namn FROM Agent ORDER BY Namn";

        ArrayList<String> allaAgenter;

        try {
            allaAgenter = idb.fetchColumn(agentFråga);

            for (String enAgent : allaAgenter) {
                jCBAgent.addItem(enAgent);
            }

        } catch (InfException ettUndantag) {
            JOptionPane.showMessageDialog(null, "Inläsningsfel ifrån Databasen");
        }

    }
    
    //Fyller klassens fält med information ifrån användarens inmatning
    private void setAlienInfo(){
        
        namn = jTFNamn.getText();
        losenord = jTFLosenord.getText();
        telefon = jTFTelefon.getText();
       
        radioButtonCheck();
        setAid();
        setPlats();
        setAnsvarigAgent();
        
        
    }
    
    // RAS Kontroll
    //Gör en kontroll på vilken radiobutton som är vald
    private void radioButtonCheck(){
        if(jRBBoglodite.isSelected()){
           ras = "Boglodite"; 
        }
        else if(jRBSquid.isSelected()){
             ras = "Squid";
        }
        
        else if(jRBWorm.isSelected()){
             ras = "Worm";
        }
            
    }
    
    // Genererar ett Alien_ID som är unikt 
    private void setAid(){
        
        // Hämtar ett unikt ID för registreringen av en ny Alien
        try{
            
            String charAid = idb.getAutoIncrement("Alien", "Alien_id");
            
            aid = Integer.parseInt(charAid);
        } 
        catch(InfException e){
            JOptionPane.showMessageDialog(null, "Databasfel");
            System.out.println("Kunde inte hämta Alien_ID" + e.getMessage());
        }
        
    }
    
    //hämtar platsens ID för den platsen man valt i comboboxen
    private void setPlats(){
        try{
            
            String platsnamn = jCBPlats.getSelectedItem().toString();
            String platsfraga = "SELECT Plats_ID FROM Plats WHERE Benamning like '"+platsnamn+"'";
            
            String charPlats = idb.fetchSingle(platsfraga);
            
            plats = Integer.parseInt(charPlats);
            
        } catch(InfException e){
            JOptionPane.showMessageDialog(null, "Platsen fanns inte i databasen");
            System.out.println("Kunde inte hämta vald plats" + e.getMessage());
            
        }
        
    }
    
    //hämtar agentens ID för den ansvariga agent man valt i comboboxen
    private void setAnsvarigAgent(){
        try{
            
            String agentnamn = jCBAgent.getSelectedItem().toString();
            String agentfraga = "SELECT Agent_ID FROM Agent WHERE Namn like '"+agentnamn+"'";
            
            String charAgent =  idb.fetchSingle(agentfraga);
            
            ansvarigAgent = Integer.parseInt(charAgent);
            
        } catch(InfException e){
            JOptionPane.showMessageDialog(null, "Agenten fanns inte i databasen");
            System.out.println("Kunde inte hämta vald agent" + e.getMessage());
            
        }
        
    }
    
    // Sätter rasen för den Alien som registreras
    //Skickar upp rasen till Databasen
    private void sattRas(){
        String fraga = "";
       
        switch (ras) {
            case "Worm":
                
                fraga = "INSERT INTO "+ras+" VALUES("+aid+")";
                break;
                
            case "Boglodite":
                
                int antalBogloditeBoogies= getAntalBoogies();
                fraga = "INSERT INTO "+ras+" VALUES("+aid+", " +antalBogloditeBoogies+")";
                
                break;
                
            case "Squid":
                
                int squidArmar = getArmarSquid();
                fraga = "INSERT INTO "+ras+" VALUES("+aid+", " +squidArmar+")";
                
                break;
                
            default:
            // code block
        }
        
        //Lägger till rasen i databasen
        try{
            idb.insert(fraga);
        } catch(InfException e){
            JOptionPane.showMessageDialog(null, "Fel i databasen");
            System.out.println("Kunde inte lägga till ras" + e.getMessage());
            
        }
        
    }
    
    //lägger till antal armar till ras
    //Skickar en uppmaning till användaren att mata in antal armar
    private int getArmarSquid(){
        String armar = JOptionPane.showInputDialog("Hur många armar har din Alien? Räkna dom tack!");
        int antalArmar = Integer.parseInt(armar);
        
        return antalArmar;
    }
    
     //lägger till antal Boogies till ras
    //Skickar en uppmaning till användaren att mata in antal Boogies
    private int getAntalBoogies(){
        String boogies = JOptionPane.showInputDialog("Hur många boogies har din Alien? Räkna dom tack!");
        int antalBoogies = Integer.parseInt(boogies);
        return antalBoogies;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBRegistrera;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    // End of variables declaration//GEN-END:variables
}
